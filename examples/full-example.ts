/**
 * @ldesign/performance ÂÆåÊï¥ÂäüËÉΩÁ§∫‰æã
 * 
 * Êú¨Á§∫‰æãÂ±ïÁ§∫‰∫ÜÂåÖÁöÑÊâÄÊúâ‰∏ªË¶ÅÂäüËÉΩÔºö
 * - ÊûÑÂª∫ÊåáÊ†áÊî∂ÈõÜ
 * - ‰ºòÂåñÂª∫ËÆÆÁîüÊàê
 * - È¢ÑÁÆóÊ£ÄÊü•
 * - Â§öÊ†ºÂºèÊä•ÂëäÁîüÊàê
 * - ÂéÜÂè≤ËÆ∞ÂΩïÁÆ°ÁêÜ
 * - Ë∂ãÂäøÂàÜÊûê
 * - Prometheus metrics ÂØºÂá∫
 * - GitHub Actions ÈõÜÊàê
 */

import {
  // Ê†∏ÂøÉÂäüËÉΩ
  MetricsCollector,
  OptimizationEngine,
  BudgetManager,
  
  // ÂéÜÂè≤‰∏éË∂ãÂäø
  HistoryManager,
  TrendAnalyzer,
  
  // Êä•ÂëäÁîüÊàêÂô®
  CliReporter,
  JsonReporter,
  HtmlReporter,
  MarkdownReporter,
  GitHubActionsReporter,
  
  // ÂØºÂá∫Âô®
  PrometheusExporter,
  
  // ËøêË°åÊó∂ÁõëÊéß
  RuntimeMonitor,
  
  // Á±ªÂûã
  type PerformanceConfig,
  type PerformanceReport,
} from '@ldesign/performance'

async function main() {
  console.log('üöÄ @ldesign/performance - Full Example\n')

  // 1. ÈÖçÁΩÆ
  const config: PerformanceConfig = {
    budgets: {
      bundles: [
        { name: 'main', maxSize: '300kb', warningSize: '250kb' },
        { name: 'vendor', maxSize: '500kb' },
      ],
      metrics: {
        lcp: 2500,
        fid: 100,
        cls: 0.1,
        fcp: 1800,
      },
    },
    analyze: {
      generateReport: true,
      outputDir: '.performance',
      formats: ['html', 'json', 'markdown'],
    },
    verbose: true,
  }

  // 2. Êî∂ÈõÜÊûÑÂª∫ÊåáÊ†á
  console.log('üìä Collecting build metrics...')
  const collector = new MetricsCollector()
  collector.startBuildMetrics()
  
  // Ê®°ÊãüÊûÑÂª∫ËøáÁ®ã
  await new Promise(resolve => setTimeout(resolve, 1000))
  
  const buildMetrics = await collector.endBuildMetrics('./dist')
  console.log(`‚úì Build completed in ${buildMetrics.duration}ms`)
  console.log(`‚úì Total size: ${buildMetrics.totalSize} bytes`)

  // 3. ÁîüÊàê‰ºòÂåñÂª∫ËÆÆ
  console.log('\nüí° Generating optimization suggestions...')
  const optimizer = new OptimizationEngine()
  const suggestions = optimizer.generateSuggestions(buildMetrics)
  console.log(`‚úì Generated ${suggestions.length} suggestions`)

  // 4. Ê£ÄÊü•ÊÄßËÉΩÈ¢ÑÁÆó
  console.log('\nüí∞ Checking performance budgets...')
  const budgetManager = new BudgetManager()
  const budgetResults = budgetManager.check(
    config.budgets!,
    buildMetrics
  )
  const budgetStats = budgetManager.getStats(budgetResults)
  console.log(`‚úì Budget checks: ${budgetStats.passed}/${budgetStats.total} passed`)

  // 5. ÁîüÊàêÊÄßËÉΩÊä•Âëä
  const report: PerformanceReport = {
    timestamp: Date.now(),
    project: {
      name: 'my-awesome-app',
      version: '1.0.0',
      path: process.cwd(),
    },
    buildMetrics,
    budgetResults,
    suggestions,
    score: 85, // ÁÆÄÂåñËÆ°ÁÆó
  }

  // 6. ÁîüÊàêÂ§öÁßçÊ†ºÂºèÁöÑÊä•Âëä
  console.log('\nüìã Generating reports...')
  
  // CLI Êä•Âëä
  const cliReporter = new CliReporter()
  cliReporter.generate(report, '')
  
  // JSON Êä•Âëä
  const jsonReporter = new JsonReporter()
  const jsonPath = jsonReporter.generate(report, '.performance')
  console.log(`‚úì JSON report: ${jsonPath}`)
  
  // HTML Êä•Âëä
  const htmlReporter = new HtmlReporter()
  const htmlPath = htmlReporter.generate(report, '.performance')
  console.log(`‚úì HTML report: ${htmlPath}`)
  
  // Markdown Êä•Âëä
  const mdReporter = new MarkdownReporter()
  const mdPath = mdReporter.generate(report, '.performance')
  console.log(`‚úì Markdown report: ${mdPath}`)

  // 7. GitHub Actions Êä•Âëä
  if (process.env.GITHUB_ACTIONS) {
    console.log('\nü§ñ Generating GitHub Actions output...')
    const ghReporter = new GitHubActionsReporter()
    ghReporter.generate(report)
    
    // ÁîüÊàê PR ËØÑËÆ∫
    const comment = ghReporter.generatePRComment(report)
    console.log('PR Comment generated')
  }

  // 8. ÂéÜÂè≤ËÆ∞ÂΩïÁÆ°ÁêÜ
  console.log('\nüìö Managing history...')
  const history = new HistoryManager('.performance')
  await history.addEntry(report, {
    commit: process.env.GIT_COMMIT || 'local',
    branch: process.env.GIT_BRANCH || 'main',
  })
  
  const historyStats = await history.getStats()
  console.log(`‚úì History: ${historyStats.count} entries`)

  // 9. Ë∂ãÂäøÂàÜÊûê
  console.log('\nüìà Analyzing trends...')
  const trendAnalyzer = new TrendAnalyzer()
  const historyEntries = await history.getHistory(10)
  const trends = trendAnalyzer.analyzeTrends(historyEntries)
  
  console.log(`‚úì Regressions: ${trends.regressions.length}`)
  console.log(`‚úì Improvements: ${trends.improvements.length}`)
  
  // Êä•ÂëäÂõûÂΩí
  if (trends.regressions.length > 0) {
    console.log('\n‚ö†Ô∏è  Performance Regressions Detected:')
    for (const regression of trends.regressions) {
      console.log(`  - ${regression.metric}: +${regression.changePercentage.toFixed(1)}%`)
    }
  }
  
  // Êä•ÂëäÊîπËøõ
  if (trends.improvements.length > 0) {
    console.log('\n‚úÖ Performance Improvements:')
    for (const improvement of trends.improvements) {
      console.log(`  - ${improvement.metric}: -${improvement.improvementPercentage.toFixed(1)}%`)
    }
  }

  // 10. Prometheus Metrics ÂØºÂá∫
  console.log('\nüìä Exporting Prometheus metrics...')
  const promExporter = new PrometheusExporter('my_app')
  const metrics = promExporter.generateMetrics(report)
  console.log(`‚úì Generated ${metrics.metrics.length} metrics`)
  
  promExporter.exportToFile(report, '.performance/metrics.prom')
  console.log('‚úì Metrics exported to .performance/metrics.prom')

  // 11. ËøêË°åÊó∂ÁõëÊéßÔºàÂèØÈÄâÔºâ
  if (process.env.MONITOR_URL) {
    console.log('\nüîç Running runtime monitoring...')
    const monitor = new RuntimeMonitor()
    const runtimeMetrics = await monitor.collectRuntimeMetrics(process.env.MONITOR_URL)
    console.log('‚úì Runtime metrics collected')
  }

  // 12. ÊÄªÁªì
  console.log('\n' + '='.repeat(60))
  console.log('üìä Performance Analysis Summary')
  console.log('='.repeat(60))
  console.log(`Performance Score: ${report.score}/100`)
  console.log(`Build Duration: ${buildMetrics.duration}ms`)
  console.log(`Total Size: ${(buildMetrics.totalSize / 1024).toFixed(2)} KB`)
  console.log(`Gzip Size: ${(buildMetrics.totalGzipSize / 1024).toFixed(2)} KB`)
  console.log(`Budget Status: ${budgetStats.passRate}% passed`)
  console.log(`Optimization Suggestions: ${suggestions.length}`)
  console.log('='.repeat(60))

  // 13. ÂÜ≥ÂÆöÈÄÄÂá∫Áä∂ÊÄÅ
  const hasFailures = !budgetManager.allPassed(budgetResults)
  if (hasFailures) {
    console.log('\n‚ùå Performance budget exceeded!')
    process.exit(1)
  }

  console.log('\n‚úÖ Performance analysis completed successfully!')
}

// ËøêË°åÁ§∫‰æã
main().catch(error => {
  console.error('‚ùå Error:', error)
  process.exit(1)
})

